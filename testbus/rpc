#!/bin/bash
#
# This script uses testbus to test libtirpc, rpcbind and rpcinfo
#

USE_YAST=true

# TESTBUS_SELFTEST_DEBUG=all

. /usr/share/testbus/functions
. $0.functions

TMPDIR=/tmp/testbus-rpc
mkdir -p $TMPDIR

##################################################################
# Testbus initialization
##################################################################
testbus_group_begin $0

RPC_SERVER=`testbus_claim_host --role rpc_server`
test -n "$RPC_SERVER" || testbus_exit_fail "unable to claim server"

RPC_CLIENT=`testbus_claim_host --role rpc_client`
test -n "$RPC_CLIENT" || testbus_exit_fail "unable to claim client"

RPC_SERVER_IP=`testbus_getenv $RPC_SERVER primary_ip`
if [ -z "$RPC_SERVER_IP" ]; then
	testbus_exit_fail "No IP address for server"
fi
RPC_CLIENT_IP=`testbus_getenv $RPC_CLIENT primary_ip`
if [ -z "$RPC_CLIENT_IP" ]; then
	testbus_exit_fail "No IP address for client"
fi

##################################################################
# Initialize rpc using yast2
##################################################################
testbus_group_begin rpc-init

testbus_test_begin start
rpc_run_server /usr/bin/systemctl enable rpcbind.socket
rpc_run_server /usr/bin/systemctl start rpcbind.socket

testbus_test_begin find-rpcinfo
RPCINFO=
for path in /sbin/rpcinfo /usr/sbin/rpcinfo /bin/rpcinfo /usr/bin/rpcinfo; do
	if __rpc_run_server /usr/bin/test -f $path; then
		RPCINFO=$path
		break
	fi
done
if [ -z "$RPCINFO" ]; then
	testbus_test_failure "Cannot find rpcinfo binary"
	exit 1
fi

testbus_test_begin verify-rpcinfo
if ! rpc_run_server $RPCINFO >/dev/null; then
	testbus_test_failure "$RPCINFO does not seem to work"
	exit 1
fi

testbus_group_finish

##################################################################
# Check basic rpcinfo functionality
##################################################################
testbus_group_begin basic-rpcinfo

testbus_test_begin rpcinfo-v4
if ! rpc_run_server $RPCINFO 127.0.0.1 >/dev/null; then
	testbus_test_failure "$RPCINFO 127.0.0.1 does not seem to work"
fi

testbus_test_begin rpcinfo-v6
if ! rpc_run_server $RPCINFO ::1 >/dev/null; then
	testbus_test_failure "$RPCINFO ::1 does not seem to work"
fi

testbus_test_begin rpcinfo-p
rpc_run_server $RPCINFO -p >/dev/null

testbus_test_begin rpcinfo-p-v4
rpc_run_server $RPCINFO -p 127.0.0.1 >/dev/null

testbus_test_begin rpcinfo-p-v6
rpc_run_server $RPCINFO -p ::1 >/dev/null

testbus_test_begin rpcinfo-m
rpc_run_server $RPCINFO -m

testbus_test_begin rpcinfo-m-v4
rpc_run_server $RPCINFO -m 127.0.0.1

testbus_test_begin rpcinfo-m-v6
rpc_run_server $RPCINFO -m ::1

for version in 2 3 4; do
	testbus_test_begin rpcinfo-info-v$version
	rpc_run_server $RPCINFO -T local ignoreme portmapper $version
done

rpc_verify_rpcinfo_null $RPC_SERVER udp 127.0.0.1 tcp 127.0.0.1 udp6 ::1 tcp6 ::1

rpc_verify_rpcinfo verify-listing-nohost $RPCINFO -p <<EOF
   program vers proto   port  service
    100000    4   tcp    111  portmapper
    100000    3   tcp    111  portmapper
    100000    2   tcp    111  portmapper
    100000    4   udp    111  portmapper
    100000    3   udp    111  portmapper
    100000    2   udp    111  portmapper
EOF

rpc_verify_rpcinfo verify-binding-nohost $RPCINFO <<EOF
   program version netid     address                service    owner
    100000    4    tcp6      ::.0.111               portmapper superuser
    100000    3    tcp6      ::.0.111               portmapper superuser
    100000    4    udp6      ::.0.111               portmapper superuser
    100000    3    udp6      ::.0.111               portmapper superuser
    100000    4    tcp       0.0.0.0.0.111          portmapper superuser
    100000    3    tcp       0.0.0.0.0.111          portmapper superuser
    100000    2    tcp       0.0.0.0.0.111          portmapper superuser
    100000    4    udp       0.0.0.0.0.111          portmapper superuser
    100000    3    udp       0.0.0.0.0.111          portmapper superuser
    100000    2    udp       0.0.0.0.0.111          portmapper superuser
    100000    4    local     /run/rpcbind.sock      portmapper superuser
    100000    3    local     /run/rpcbind.sock      portmapper superuser
EOF

testbus_group_finish

##################################################################
# Check basic rpcinfo functionality remotely
##################################################################
testbus_group_begin remote-rpcinfo

testbus_test_begin rpcinfo-v4
if ! rpc_run_client $RPCINFO $RPC_SERVER_IP >/dev/null; then
	testbus_test_failure "$RPCINFO $RPC_SERVER_IP does not seem to work"
fi

testbus_test_begin rpcinfo-p-v4
if ! rpc_run_client $RPCINFO -p $RPC_SERVER_IP >/dev/null; then
	testbus_test_failure "$RPCINFO -p $RPC_SERVER_IP does not seem to work"
fi

testbus_test_begin rpcinfo-m-v4
if ! rpc_run_client $RPCINFO -m $RPC_SERVER_IP >/dev/null; then
	testbus_test_failure "$RPCINFO -m $RPC_SERVER_IP does not seem to work"
fi

# Currently, we're not configuring any IPv6 addresses, so no remote
# IPv6 testing
rpc_verify_rpcinfo_null $RPC_CLIENT udp $RPC_SERVER_IP tcp $RPC_SERVER_IP

rpc_verify_rpcinfo_broadcast portmapper

testbus_group_finish

##################################################################
# Run a basic service
##################################################################
testbus_group_begin square

SQUARE_RPC=202020
SERVER_BIN=/usr/bin/rpc.squared
CLIENT_BIN=/usr/bin/square

testbus_test_begin start-server
rpc_run_server $SERVER_BIN


testbus_test_begin test-client
rpc_run_client $RPCINFO -T udp $RPC_SERVER_IP $SQUARE_RPC
rpc_run_client $RPCINFO -T tcp $RPC_SERVER_IP $SQUARE_RPC
rpc_run_client $CLIENT_BIN -h $RPC_SERVER_IP 10

rpc_verify_rpcinfo_broadcast $SQUARE_RPC

testbus_test_begin stop-server
rpc_run_server /sbin/killproc $SERVER_BIN
rpc_run_server $RPCINFO -d $SQUARE_RPC 1

testbus_test_begin verify-server-stopped
if rpc_run_client $RPCINFO $RPC_SERVER_IP | grep -qs $SQUARE_RPC; then
	testbus_test_failure "square service still registered with rpcbind"
fi

# TBD:
# Export NETPATH=udp, start rpc.squared and make sure it didn't register a tcp transport
# Export NETPATH=tcp, start rpc.squared and make sure it didn't register a udp transport

testbus_group_finish

##################################################################
# getaddr unit tests
##################################################################
testbus_group_begin getaddr

SQUARE_RPC=202020
SERVER_BIN=/usr/bin/rpc.squared
GETADDR=/usr/bin/getaddr

testbus_test_begin start-server
rpc_run_server $SERVER_BIN

for option in "" "--no-netid" "--no-hint" "--use-getversaddr"; do

	for netid in udp tcp; do
		testbus_test_begin getaddr-$netid$option
		output=`testbus_new_tempfile output`

		# When using RPCB_GETVERSADDR, the query must include the version
		# number.
		extra_arg=""
		if [ "$option" = "--use-getversaddr" ]; then
			extra_arg="1"
		fi
		if ! __rpc_run_client $GETADDR --hostname $RPC_SERVER_IP --netid $netid $option $SQUARE_RPC $extra_arg >$output; then
			testbus_test_failure "getaddr invocation exited with error (status $?)"
			cat $output
			continue;
		fi

		cat $output
		if grep -qs NOREG $output; then
			testbus_test_failure "getaddr invocation returned NOREG"
			continue
		fi

		testbus_test_success
	done
done

testbus_test_begin stop-server
rpc_run_server /sbin/killproc $SERVER_BIN
rpc_run_server $RPCINFO -d $SQUARE_RPC 1

testbus_group_finish

##################################################################
# libtirpc unit tests
# FIXME: it would be nice if we could parse/format the individual
# tests and their status in a way compatible with what testbus
# shows.
# Maybe just add a "--testbus" option to rpctest to make it do that.
##################################################################
testbus_group_begin libtirpc

testbus_test_begin rpctest
#rpc_run_client /bin/true
rpc_run_server /usr/bin/rpctest

testbus_group_finish
